import config
import telebot
from telebot import types
from api import convert_currency

api_key1 = config.telegram_api_key
bot = telebot.TeleBot(api_key1)

class State:
    CHOOSE_FROM = "choose_from"
    CHOOSE_TO = "choose_to"
    ENTER_AMOUNT = "enter_amount"

class UserSession:
    def __init__(self):
        self.state = None
        self.from_currency = None
        self.to_currency = None
        self.amount = None

user_data = {}

symbols = {
    "Crypto": {"Bitcoin": "BTC"},
    "Metals": {"–ó–æ–ª–æ—Ç–æ(troy ounce)": "XAU", "–°—Ä—ñ–±–ª–æ(troy ounce)": "XAG"},
    "Currency": {
        "UAH ‚Ç¥": "UAH", "USD $": "USD", "EUR ‚Ç¨": "EUR", "GBP ¬£": "GBP",
        "JPY ¬•": "JPY", "CNY ¬•": "CNY", "KZT ‚Ç∏": "KZT", "AED": "AED", "PLN Z≈Ç": "PLN"
    }
}
all_symbols = {k: v for group in symbols.values() for k, v in group.items()}

def main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞", "¬§ –í–∞–ª—é—Ç–∞")
    markup.add("üí∞ –¶—ñ–Ω–Ω—ñ –º–µ—Ç–∞–ª–∏", "‚ùå –í–∏–π—Ç–∏")
    return markup

def generate_submenu(category):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for name in symbols[category].keys():
        markup.add(types.KeyboardButton(name))
    markup.add("‚Üê –ù–∞–∑–∞–¥")
    return markup

@bot.message_handler(commands=['start', 'menu'])
def start(message):
    user_data[message.chat.id] = UserSession()
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä–∏ –æ–ø—Ü—ñ—é –Ω–∏–∂—á–µ:", reply_markup=main_menu())

@bot.message_handler(commands=['help'])
def help_command(message):
    bot.send_message(message.chat.id, "–¶–µ–π –±–æ—Ç –¥–æ–ø–æ–º–æ–∂–µ –∫–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏ –≤–∞–ª—é—Ç—É, –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É —Ç–∞ –º–µ—Ç–∞–ª–∏.\n"
                                      "1Ô∏è‚É£ –û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –≤–∞–ª—é—Ç–∏\n"
                                      "2Ô∏è‚É£ –û–±–µ—Ä—ñ—Ç—å –∑ —è–∫–æ—ó –Ω–∞ —è–∫—É –∫–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏\n"
                                      "3Ô∏è‚É£ –í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –¥–ª—è –æ–±–º—ñ–Ω—É")

@bot.message_handler(func=lambda msg: msg.text == "‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞")
def crypto_menu(message):
    bot.send_message(message.chat.id, "–û–±–µ—Ä–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É:", reply_markup=generate_submenu("Crypto"))

@bot.message_handler(func=lambda msg: msg.text == "¬§ –í–∞–ª—é—Ç–∞")
def currency_menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
    buttons = [types.KeyboardButton(name) for name in symbols["Currency"]]
    markup.add(*buttons)
    markup.add("‚Üê –ù–∞–∑–∞–¥")
    bot.send_message(message.chat.id, "–û–±–µ—Ä–∏ –≤–∞–ª—é—Ç—É:", reply_markup=markup)

@bot.message_handler(func=lambda msg: msg.text == "üí∞ –¶—ñ–Ω–Ω—ñ –º–µ—Ç–∞–ª–∏")
def metals_menu(message):
    bot.send_message(message.chat.id, "–û–±–µ—Ä–∏ –º–µ—Ç–∞–ª:", reply_markup=generate_submenu("Metals"))

@bot.message_handler(func=lambda msg: msg.text == "‚Üê –ù–∞–∑–∞–¥")
def back_to_main(message):
    user_data[message.chat.id] = UserSession()
    bot.send_message(message.chat.id, "–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é:", reply_markup=main_menu())

@bot.message_handler(func=lambda msg: msg.text == "‚ùå –í–∏–π—Ç–∏")
def exit_bot(message):
    bot.send_message(message.chat.id, "–î—è–∫—É—î–º–æ –∑–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –±–æ—Ç–∞!", reply_markup=types.ReplyKeyboardRemove())
    user_data.pop(message.chat.id, None)

@bot.message_handler(func=lambda msg: True)
def handle_selection(message):
    chat_id = message.chat.id
    text = message.text
    user = user_data.setdefault(chat_id, UserSession())

    currency_code = all_symbols.get(text)

    if currency_code:
        if user.state is None: 
            user.from_currency = currency_code
            user.state = State.CHOOSE_TO
            bot.send_message(chat_id, "–û–±–µ—Ä—ñ—Ç—å –≤–∞–ª—é—Ç—É, –≤ —è–∫—É —Ö–æ—á–µ—Ç–µ –∫–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏:", reply_markup=main_menu())
        elif user.state == State.CHOOSE_TO:
            user.to_currency = currency_code
            user.state = State.ENTER_AMOUNT
            msg = bot.send_message(chat_id, "–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó:", reply_markup=types.ReplyKeyboardRemove())
            bot.register_next_step_handler(msg, get_amount)
    elif user.state == State.ENTER_AMOUNT:
        bot.register_next_step_handler(message, get_amount)
    else:
        bot.send_message(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –≤–∞–ª—é—Ç—É –∞–±–æ –º–µ—Ç–∞–ª –∑ –º–µ–Ω—é.")

def get_amount(message):
    chat_id = message.chat.id
    user = user_data.get(chat_id)

    try:

        amount = float(message.text)

        if amount <= 0:
            raise ValueError("–°—É–º–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –±—ñ–ª—å—à–µ –∑–∞ 0.")
        if amount > 1_000_000:
            raise ValueError("–°—É–º–∞ –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –º–µ–Ω—à—É —Å—É–º—É.")

        result = convert_currency(user.from_currency, user.to_currency, amount)

        if result > 0:
            exchange_rate = round(result / amount, 2)
            response = (
                f"‚úÖ *–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞!*\n"
                f"{amount:.2f} {user.from_currency} ‚Üí {result:.2f} {user.to_currency}\n"
                f"_–ö—É—Ä—Å_: 1 {user.from_currency} = {exchange_rate:.2f} {user.to_currency}"
            )
            bot.send_message(chat_id, response, parse_mode="Markdown", reply_markup=main_menu())
        else:
            bot.send_message(chat_id, "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.", reply_markup=main_menu())

        user_data[chat_id] = UserSession()

    except ValueError as e:
        msg = bot.send_message(chat_id, f"‚ùå {e}\n–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        bot.register_next_step_handler(msg, get_amount)

bot.infinity_polling()